Bird captures
========================================================
![birdrichness](bird_richness.jpg)
author: Judit Ungvari-Martin  


Sampling Birds in Two Forest Types    

================================================


    - Western Amazonia

*******
![map](PeruGISArcdesktop.jpg)

Localities & Background
========================================================
- 22 months in the field
- mark/recapture of birds 
- 2 different habitat types

*******

![closer](GisArcdesktop.jpg)



Packages Used
========================================================

```{r}
library("knitr")
library("gdata")
library("vegan")
library("bipartite")
library("betapart")
library("reshape")
library("labdsv")
library("dplyr")
library("maps")
library("mapdata")
source("~/Dropbox/R resources/codes/pois_aov.R")
library("vegan")
library("maptools")
library("RColorBrewer")
library("mapplots")
library("maps")
library("mapdata")
library("scales")
```

Dataset
========================================================
- basically the raw data straight from the field notes
```{r, echo=TRUE}
complete = read.csv(file="data/complete.csv", header=TRUE)
(dim(complete))
names(complete)
```

Dataset cleanup
========================================================


```{r}
complete = complete[!is.na(complete$Regist),] #removes 77 unused lat long NA rows
dim(complete)
summary(complete$lon)
summary(complete$lat) #use the min and max values for map making
```

First glance
========================================================
- Make a list of all the species and sort them
```{r, eval=FALSE}
# Species rank curve dataset
(allsp = sort(table(complete$spp), decreasing = TRUE))
```

![diversity](avianBio.jpg)



Rank curve for all captures
========================================================
```{r, echo=FALSE}
allsp = sort(table(complete$spp), decreasing = TRUE)
barplot(allsp[allsp>2], #xlab = "Species", 
        ylab = "Number of captures", cex.names=0.34,las=2) 
```
Further cleanup
========================================================

```{r, echo=FALSE}
#remove edge, so we only consider forest species
complete$general.habitat <- factor(complete$general.habitat)
completeF = subset(complete, general.habitat !="edge")
complete$NetlineYEAR <- factor(complete$NetlineYEAR)
completeF = subset(completeF, NetlineYEAR !="2ndary_2011")
completeF = subset(completeF, NetlineYEAR !="Lek 1_2009")
completeF$general.habitat <- drop.levels(completeF$general.habitat, reorder=TRUE)
completeF$NetlineYEAR <- drop.levels(completeF$NetlineYEAR, reorder=TRUE)
forest.caps <- summary(completeF$general.habitat)
forest.net <- summary(completeF$NetlineYEAR)   ###
#(write.table(forest.net, col.names=TRUE))
```
- Calculate the average number of captures, mean,stdev of forest.net
```{r, eval=F}
summary(forest.net)
```
```{r, echo=T}
(capmeans <- mean(forest.net))
(capsd <- sd(forest.net))
```
Create subsets of new captures, recaptures, repeated captures
========================================================
- Calculate number of captures per habitat
```{r, echo=F}
#new captures subset, basically removing all repeated captures
norecap = completeF[ which(completeF$Codigo != "R"),]
norecap <- norecap[which(!is.na(norecap$general.habitat)),] #delete NA rows
norecap$Codigo <- drop.levels(norecap$Codigo, reorder=TRUE)
summary(norecap$general.habitat)
```
- wsf stands for white sand forests 
```{r, echo=FALSE}
#individuals recapatured between years
re.cap = completeF[ which(completeF$Codigo =="A"),]
re.cap <- re.cap[which(!is.na(re.cap$general.habitat)),] #delete NA rows
recaps <- summary(re.cap$general.habitat)
## calculating % recaptures

#individuals recapatured between years on other netlines
rother.cap = completeF[ which(completeF$Codigo =="AO"),]
rother.cap <- rother.cap[which(!is.na(rother.cap$general.habitat)),] #delete NA rows
moves <- summary(rother.cap$general.habitat)
## calculating % recaptures elsewhere. only 92 movements across 

#new individuals subset
newcap = completeF[ which(completeF$Codigo == "N"),]
newcap <- newcap[which(!is.na(newcap$general.habitat)),] #delete NA rows
newcap$spp <- drop.levels(newcap$spp, reorder=TRUE)
newcap$FAMILY <- drop.levels(newcap$FAMILY, reorder=TRUE)
newcap$Genus <- drop.levels(newcap$Genus, reorder=TRUE)
no.individuals <- summary(newcap$general.habitat)
indivs.species <- summary(newcap$spp)
```

Create subsets for habitats
========================================================
-- within sandy forests there are 3 subsets of habitats


```{r, echo=FALSE}
#Habitat specific - tierra firme
tf <- completeF[which(completeF$general.habitat =="clay"),] #clay]
tfcap = newcap[ which(newcap$general.habitat =="clay"),] #clay
tf$general.habitat <- drop.levels(tf$general.habitat, reorder=TRUE)
tf$spp <- drop.levels(tf$spp, reorder=TRUE)
tf$NetlineYEAR <- drop.levels(tf$NetlineYEAR, reorder=TRUE)
tfsp.table <- table(tfcap$spp)
tfsp = sort(table(tfcap$spp), decreasing = TRUE)
#summary(tfcap)
#make graph 
par(mfrow=c(1,2))
barplot(tfsp[tfsp>5], #xlab = "Species", 
        ylab = "Number of captures", 
        main="Clay",
        cex.names=0.6,las=2) #Species Rank curve for all captures)
tfforest.caps <- summary(tf$general.habitat)
tfforest.net <- summary(tf$NetlineYEAR)  ###
### Calculate the average number of captures, mean,stdev of forest.net
tfcapmeans <- mean(tfforest.net)
tfcapsd <- sd(tfforest.net)

#Habitat specific - all white sands
ws <- completeF[which(completeF$general.habitat =="wsf"),]
wscap = newcap[ which(newcap$general.habitat =="wsf"),] #wsf
ws$general.habitat <- drop.levels(ws$general.habitat, reorder=TRUE)
ws$NetlineYEAR <- drop.levels(ws$NetlineYEAR, reorder=TRUE)
ws$spp <- drop.levels(ws$spp, reorder=TRUE)
wsfsp = sort(table(wscap$spp), decreasing = TRUE)
#make graph for birds captured in white sand forest
barplot(wsfsp[wsfsp>5],#xlab = "Species", 
        main="WSF",
        ylab = "Number of captures", cex.names=0.6,las=2) #Species Rank curve for all captures
wsforest.caps <- summary(ws$general.habitat)
wsforest.net <- summary(ws$NetlineYEAR)  ###
### Calculate the average number of captures, mean,stdev of forest.net
wscapmeans <- mean(wsforest.net)
wscapsd <- sd(wsforest.net)
#Habitat specific - chamizal

chamizal = newcap[ which(newcap$Specific.Habitat =="chamizal"),]
chamizal$spp <- drop.levels(chamizal$spp, reorder=TRUE)
chamizal$Specific.Habitat <- drop.levels(chamizal$Specific.Habitat, reorder=TRUE)
chamsp = sort(table(chamizal$spp), decreasing = TRUE)
par(mfrow=c(1,3))
barplot(chamsp[chamsp>2], ylab = "Number of captures", cex.names=0.41,las=2,
        main="Chamizal") #Species Rank curve for all captures)
#Habitat specific - varillal seco
vs = newcap[ which(newcap$Specific.Habitat =="varillal seco"),] #varillal seco
vs$Specific.Habitat <- drop.levels(vs$Specific.Habitat, reorder=TRUE)
vs$spp <- drop.levels(vs$spp, reorder=TRUE)
vsspp = sort(table(vs$spp), decreasing = TRUE)
#make graph for birds captured in white sand forest
# barplot(vsspp[vsspp>5],#xlab = "Species", 
#         main="Varillal Seco",
#         ylab = "Number of captures", cex.names=0.5,las=2) #Species Rank curve for all captures

# #Habitat specific - varillal humedo 
# vhum = newcap[ which(newcap$Specific.Habitat =="varillal humedo"),]
# vhum$Specific.Habitat <- drop.levels(vhum$Specific.Habitat, reorder=TRUE)
# vhum$spp <- drop.levels(vhum$spp, reorder=TRUE)
# vhsp = sort(table(vhum$spp), decreasing = TRUE)
# barplot(vhsp[vhsp>5], #xlab = "Species", 
#         main="varillal humedo",
#         ylab = "Number of captures", cex.names=0.4,las=2) #Species Rank curve for all captures
```

Number of sites per species
=================================
```{r, echo=FALSE}
data.m <- melt(norecap)
#head(data.m)
data.c <- cast(data.m, NetlineYEAR ~ spp)
data.c <- drop.levels(data.c, reorder=TRUE)
#str(data.c)
#head(data.c)
rownames(data.c) <- data.c[,1]
data.c <- data.c[,-1] #removing rownames
data.c[data.c>0] <- 1 #presence/absence matrix
##Number of sites where species were detected during sampling
sites.species <- colSums(data.c)
#sort(sites.species)
freq.hist.sites.species <- hist(sites.species,
                                breaks=pretty(0:93, n=15), 
                                xlim=c(1,100),
                                main=NULL,
                                xlab="Number of sites detected", 
                                ylab="Number of Species",
                                col="black")
###data.hab compares the two habitat types
data.m.hab <- melt(norecap)
#head(data.m.hab)
data.hab <- cast(data.m.hab, general.habitat ~ spp)
data.hab <- drop.levels(data.hab, reorder=TRUE)
#str(data.hab)
#head(data.hab)
#rownames(data.hab) <- data.c[,1]
#data.hab <- data.hab[,-1] #removing rownames
data.hab[data.hab>0] <- 1 #presence/absence matrix

```
- histogram of sorted data

Comparing capture rates with a t-test
=======
```{r, echo=FALSE}

#USING BETAPART

#creating data matrix for clay only
clay <- norecap[ which(norecap$general.habitat == "clay"),]
data.clay <- cast(clay, NetlineYEAR ~ spp)
data.clay <- drop.levels(data.clay, reorder=TRUE)
rownames(data.clay) <- data.clay[,1]
data.clay <- data.clay[,-1] #removing rownames
data.clay[data.clay>0] <- 1

## NUMBER OF SPECIES CAPUTRED ON CLAY NETLINES
clayspp <- rowSums(data.clay)

#creating data matrix for sand only
sand <- norecap[ which(norecap$general.habitat == "wsf"),]
data.sand <- cast(sand, NetlineYEAR ~ spp)
data.sand <- drop.levels(data.sand, reorder=TRUE)
rownames(data.sand) <- data.sand[,1]
#data.sand <- data.sand[,-1] #removing rownames
data.sand[data.sand>0] <- 1 #presence/absence matrix
write.csv(data.sand, file="sandbirds.csv", row.names=TRUE, col.names=TRUE)
## NUMBER OF SPECIES CAPUTRED ON WSF NETLINES
sandspp <- rowSums(data.sand)

### COMPARING WSF AND CLAY BY CAPTURE RATES
captable <- data.frame(c(tfforest.net,wsforest.net), Habitat=TRUE, Species=c(clayspp,sandspp))
names(captable)[1] <- "Captures"
captable$Habitat[1:19] <- "clay"
captable$Habitat[20:93] <- "wsf"
#captable <- captable 
rm(Captures,Habitat, Species)
attach(captable)
captable[,1] <- as.numeric(captable[,1])

shapiro.test(Captures)
compare.t.caps <- t.test(Captures~Habitat, data=captable)
by(Captures,Habitat,mean)
by(Captures,Habitat,sd)
```

More histograms for number of captures
=======
```{r, echo=FALSE, fig.width=15}
par(mfrow=c(1,3))
hist((captable$Captures), xlab="number of captures",
     main="")
hist((captable$Captures), prob=TRUE, xlab="number of captures",
     main="") 
curve(dnorm(x, mean = mean(captable$Captures), sd = sd(captable$Captures)), col="red",add = TRUE)
boxplot(Captures~Habitat, main="Captures / 500 net hours", xlab="Habitat", ylab="Number of Captures")
mtext("n=19", side=1, line=2, at=1)
mtext("n=74", side=1, line=2, at=2)
```

More histograms for species
=======
```{r, echo=FALSE, fig.width=15}
par(mfrow=c(1,2))
hist(log(captable$Species), prob=TRUE, xlab="log(number of species)",
     main="")
curve(dnorm(x, mean = mean(log(captable$Species)), sd = sd(log(captable$Species))), col="red",add = TRUE)
#shapiro.test(Species) ##test for normality
#shapiro.test(log(Species))
compare.t.spps <- t.test(log(Species)~Habitat, data=captable)
#by(Species,Habitat,mean)
#by(Species,Habitat,sd)
boxplot(log(Species)~Habitat, main="Species / 500 net hours", xlab="Habitat", ylab="Log(Number of Species)")
mtext("n=19", side=1, line=2, at=1)
mtext("n=74", side=1, line=2, at=2)
legend("topright", c("Welch Two Sample t-test", 
                 "p-value = 0.01018"), cex=0.75)
```
- display legend using:
```{r, eval=FALSE}
legend("topright", c("Welch Two Sample t-test", 
                 "p-value = 0.01018"), cex=0.55)
```

Making maps
============
-map for some capture localities and species
```{r, echo=FALSE}
library(maptools)
library(RColorBrewer)
library(mapplots)
library(maps)
library(mapdata)
library(scales)
```
-map of Northern South America first
```{r}
map("worldHires", xlim=c(-90,-30), ylim=c(-30,12), col="gray95", fill=TRUE)
```

Use rangemaps from IUCN
========
-there are shapefiles for all species
*******

```{r, echo=FALSE}
NECHrange <- readShapePoly("data/species/species_22701173")  #layer of data for species range
PEARrange<- readShapePoly("data/species/species_22730401") #PEAR layer
MYCSrange <- readShapePoly("data/species/species_22733153") #Myrmeciza 
map("worldHires", xlim=c(-90,-30), ylim=c(-30,12), col="gray95", fill=TRUE)
plot(NECHrange, add=TRUE, col=alpha("darkgreen", 0.6), border=FALSE)  
plot(PEARrange, add=TRUE, col="dark red")
plot(MYCSrange, add=TRUE, col="orange")
```
Closely related species
=========
![neopelmas] (future.jpg)

```{r, echo=FALSE}
NECH = complete[ which(complete$Codigo == "N" & complete$Codigo.especie == "NECH"),]
NECHloc <- subset(NECH, !is.na(lon) & !is.na(lat))
#plot the species range
NESU <- readShapePoly("data/species/species_22701178") #Neopelma sulphureiventer 
NEPA <- readShapePoly("data/species/species_22701183") #Neopelma pallescens
NECHRY <- readShapePoly("data/species/species_22724481") #Neopelma chrysolophum
NEAU <- readShapePoly("data/species/species_22701188") #Neopelma aurifrons
```
*******
```{r, echo=FALSE}
map("worldHires", xlim=c(-90,-30), ylim=c(-30,12), col="gray95", fill=TRUE)
plot(NECHrange, add=TRUE, col=alpha("darkgreen", 0.6), border=FALSE)  
plot(NESU, add=TRUE, col="dark red" )
plot(NEPA, add=TRUE, col="hot pink" )
plot(NECHRY, add=TRUE, col="yellow")
plot(NEAU, add=TRUE, col="blue")
```

Questions?
=====
![sand](sand.jpg)